/*
 * This file is generated by jOOQ.
 */
package kr.co.ihab.speechear.persistence.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import kr.co.ihab.speechear.persistence.jooq.Public;
import kr.co.ihab.speechear.persistence.jooq.tables.records.FileInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileInfo extends TableImpl<FileInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.file_info</code>
     */
    public static final FileInfo FILE_INFO = new FileInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileInfoRecord> getRecordType() {
        return FileInfoRecord.class;
    }

    /**
     * The column <code>public.file_info.name</code>.
     */
    public final TableField<FileInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.file_info.extension</code>.
     */
    public final TableField<FileInfoRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>public.file_info.date_created</code>.
     */
    public final TableField<FileInfoRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.file_info.file_path</code>.
     */
    public final TableField<FileInfoRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.file_info.date_modified</code>.
     */
    public final TableField<FileInfoRecord, LocalDateTime> DATE_MODIFIED = createField(DSL.name("date_modified"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private FileInfo(Name alias, Table<FileInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileInfo(Name alias, Table<FileInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.file_info</code> table reference
     */
    public FileInfo(String alias) {
        this(DSL.name(alias), FILE_INFO);
    }

    /**
     * Create an aliased <code>public.file_info</code> table reference
     */
    public FileInfo(Name alias) {
        this(alias, FILE_INFO);
    }

    /**
     * Create a <code>public.file_info</code> table reference
     */
    public FileInfo() {
        this(DSL.name("file_info"), null);
    }

    public <O extends Record> FileInfo(Table<O> child, ForeignKey<O, FileInfoRecord> key) {
        super(child, key, FILE_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public FileInfo as(String alias) {
        return new FileInfo(DSL.name(alias), this);
    }

    @Override
    public FileInfo as(Name alias) {
        return new FileInfo(alias, this);
    }

    @Override
    public FileInfo as(Table<?> alias) {
        return new FileInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileInfo rename(String name) {
        return new FileInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileInfo rename(Name name) {
        return new FileInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileInfo rename(Table<?> name) {
        return new FileInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
