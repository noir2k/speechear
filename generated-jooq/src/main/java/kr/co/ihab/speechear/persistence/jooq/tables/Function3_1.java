/*
 * This file is generated by jOOQ.
 */
package kr.co.ihab.speechear.persistence.jooq.tables;


import java.util.function.Function;

import javax.annotation.processing.Generated;

import kr.co.ihab.speechear.persistence.jooq.Public;
import kr.co.ihab.speechear.persistence.jooq.tables.records.Function3_1Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Function3_1 extends TableImpl<Function3_1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.function3_1</code>
     */
    public static final Function3_1 FUNCTION3_1 = new Function3_1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Function3_1Record> getRecordType() {
        return Function3_1Record.class;
    }

    /**
     * The column <code>public.function3_1.speechcode</code>.
     */
    public final TableField<Function3_1Record, String> SPEECHCODE = createField(DSL.name("speechcode"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>public.function3_1.questioncode</code>.
     */
    public final TableField<Function3_1Record, String> QUESTIONCODE = createField(DSL.name("questioncode"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>public.function3_1.questioncontext</code>.
     */
    public final TableField<Function3_1Record, String> QUESTIONCONTEXT = createField(DSL.name("questioncontext"), SQLDataType.VARCHAR(360).nullable(false), this, "");

    /**
     * The column <code>public.function3_1.answer</code>.
     */
    public final TableField<Function3_1Record, String> ANSWER = createField(DSL.name("answer"), SQLDataType.VARCHAR(100), this, "");

    private Function3_1(Name alias, Table<Function3_1Record> aliased) {
        this(alias, aliased, null);
    }

    private Function3_1(Name alias, Table<Function3_1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.function3_1</code> table reference
     */
    public Function3_1(String alias) {
        this(DSL.name(alias), FUNCTION3_1);
    }

    /**
     * Create an aliased <code>public.function3_1</code> table reference
     */
    public Function3_1(Name alias) {
        this(alias, FUNCTION3_1);
    }

    /**
     * Create a <code>public.function3_1</code> table reference
     */
    public Function3_1() {
        this(DSL.name("function3_1"), null);
    }

    public <O extends Record> Function3_1(Table<O> child, ForeignKey<O, Function3_1Record> key) {
        super(child, key, FUNCTION3_1);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Function3_1 as(String alias) {
        return new Function3_1(DSL.name(alias), this);
    }

    @Override
    public Function3_1 as(Name alias) {
        return new Function3_1(alias, this);
    }

    @Override
    public Function3_1 as(Table<?> alias) {
        return new Function3_1(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Function3_1 rename(String name) {
        return new Function3_1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Function3_1 rename(Name name) {
        return new Function3_1(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Function3_1 rename(Table<?> name) {
        return new Function3_1(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
