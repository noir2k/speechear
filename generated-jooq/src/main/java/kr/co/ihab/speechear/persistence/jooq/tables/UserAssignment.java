/*
 * This file is generated by jOOQ.
 */
package kr.co.ihab.speechear.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import kr.co.ihab.speechear.persistence.jooq.Keys;
import kr.co.ihab.speechear.persistence.jooq.Public;
import kr.co.ihab.speechear.persistence.jooq.tables.records.UserAssignmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAssignment extends TableImpl<UserAssignmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_assignment</code>
     */
    public static final UserAssignment USER_ASSIGNMENT = new UserAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAssignmentRecord> getRecordType() {
        return UserAssignmentRecord.class;
    }

    /**
     * The column <code>public.user_assignment.id</code>.
     */
    public final TableField<UserAssignmentRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.user_assignment.manager</code>.
     */
    public final TableField<UserAssignmentRecord, String> MANAGER = createField(DSL.name("manager"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private UserAssignment(Name alias, Table<UserAssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAssignment(Name alias, Table<UserAssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_assignment</code> table reference
     */
    public UserAssignment(String alias) {
        this(DSL.name(alias), USER_ASSIGNMENT);
    }

    /**
     * Create an aliased <code>public.user_assignment</code> table reference
     */
    public UserAssignment(Name alias) {
        this(alias, USER_ASSIGNMENT);
    }

    /**
     * Create a <code>public.user_assignment</code> table reference
     */
    public UserAssignment() {
        this(DSL.name("user_assignment"), null);
    }

    public <O extends Record> UserAssignment(Table<O> child, ForeignKey<O, UserAssignmentRecord> key) {
        super(child, key, USER_ASSIGNMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserAssignmentRecord> getPrimaryKey() {
        return Keys.USER_MANAGEMENT_PK;
    }

    @Override
    public List<ForeignKey<UserAssignmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ASSIGNMENT__USER_MANAGEMENT_FK, Keys.USER_ASSIGNMENT__USER_MANAGEMENT_FK_1);
    }

    private transient UserInfo _userManagementFk;
    private transient UserInfo _userManagementFk_1;

    /**
     * Get the implicit join path to the <code>public.user_info</code> table,
     * via the <code>user_management_fk</code> key.
     */
    public UserInfo userManagementFk() {
        if (_userManagementFk == null)
            _userManagementFk = new UserInfo(this, Keys.USER_ASSIGNMENT__USER_MANAGEMENT_FK);

        return _userManagementFk;
    }

    /**
     * Get the implicit join path to the <code>public.user_info</code> table,
     * via the <code>user_management_fk_1</code> key.
     */
    public UserInfo userManagementFk_1() {
        if (_userManagementFk_1 == null)
            _userManagementFk_1 = new UserInfo(this, Keys.USER_ASSIGNMENT__USER_MANAGEMENT_FK_1);

        return _userManagementFk_1;
    }

    @Override
    public UserAssignment as(String alias) {
        return new UserAssignment(DSL.name(alias), this);
    }

    @Override
    public UserAssignment as(Name alias) {
        return new UserAssignment(alias, this);
    }

    @Override
    public UserAssignment as(Table<?> alias) {
        return new UserAssignment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAssignment rename(String name) {
        return new UserAssignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAssignment rename(Name name) {
        return new UserAssignment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAssignment rename(Table<?> name) {
        return new UserAssignment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
